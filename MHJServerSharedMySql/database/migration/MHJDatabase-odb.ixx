// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // MHJDeviceBase
  //

  inline
  access::object_traits< ::MHJDeviceBase >::id_type
  access::object_traits< ::MHJDeviceBase >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::MHJDeviceBase >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::MHJDeviceBase >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MHJDeviceChild
  //

  inline
  access::object_traits< ::MHJDeviceChild >::id_type
  access::object_traits< ::MHJDeviceChild >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::MHJDeviceChild >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::MHJDeviceChild >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MHJDeviceVirtualDefine
  //

  inline
  access::object_traits< ::MHJDeviceVirtualDefine >::id_type
  access::object_traits< ::MHJDeviceVirtualDefine >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::MHJDeviceVirtualDefine >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::MHJDeviceVirtualDefine >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MHJDeviceActivation
  //

  inline
  access::object_traits< ::MHJDeviceActivation >::id_type
  access::object_traits< ::MHJDeviceActivation >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::MHJDeviceActivation >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::MHJDeviceActivation >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MHJDeviceAuthorize
  //

  inline
  access::object_traits< ::MHJDeviceAuthorize >::id_type
  access::object_traits< ::MHJDeviceAuthorize >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::MHJDeviceAuthorize >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::MHJDeviceAuthorize >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MHJUserEntity
  //

  inline
  void access::view_traits< ::MHJUserEntity >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MHJAdminEntity
  //

  inline
  void access::view_traits< ::MHJAdminEntity >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // MHJDeviceBase
  //

  inline
  void access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // MHJDeviceChild
  //

  inline
  void access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // MHJDeviceVirtualDefine
  //

  inline
  void access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // MHJDeviceActivation
  //

  inline
  void access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // MHJDeviceAuthorize
  //

  inline
  void access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // MHJUserEntity
  //

  // MHJAdminEntity
  //
}

