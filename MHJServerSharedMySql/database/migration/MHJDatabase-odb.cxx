// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//
#ifdef SQLITE
#include <odb/pre.hxx>

#include "MHJDatabase-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/view-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/view-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // MHJDeviceBase
  //

  struct access::object_traits_impl< ::MHJDeviceBase, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::MHJDeviceBase, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::MHJDeviceBase, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // deviceID
    //
    t[1UL] = 0;

    // idsecurity
    //
    t[2UL] = 0;

    // deviceType
    //
    t[3UL] = 0;

    // virtualKeyCount
    //
    t[4UL] = 0;

    // virtualKeyDefine
    //
    if (t[5UL])
    {
      i.virtualKeyDefine_value.capacity (i.virtualKeyDefine_size);
      grew = true;
    }

    // switchKeyfCount
    //
    t[6UL] = 0;

    // security
    //
    if (t[7UL])
    {
      i.security_value.capacity (i.security_size);
      grew = true;
    }

    // createDate
    //
    t[8UL] = 0;

    // createUser
    //
    if (t[9UL])
    {
      i.createUser_value.capacity (i.createUser_size);
      grew = true;
    }

    // createVerification
    //
    t[10UL] = 0;

    // productionDate
    //
    t[11UL] = 0;

    // productionUser
    //
    if (t[12UL])
    {
      i.productionUser_value.capacity (i.productionUser_size);
      grew = true;
    }

    // activationDate
    //
    t[13UL] = 0;

    // deviceFlag
    //
    t[14UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // deviceID
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.deviceID_value;
    b[n].is_null = &i.deviceID_null;
    n++;

    // idsecurity
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.idsecurity_value;
    b[n].is_null = &i.idsecurity_null;
    n++;

    // deviceType
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.deviceType_value;
    b[n].is_null = &i.deviceType_null;
    n++;

    // virtualKeyCount
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.virtualKeyCount_value;
    b[n].is_null = &i.virtualKeyCount_null;
    n++;

    // virtualKeyDefine
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.virtualKeyDefine_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.virtualKeyDefine_value.capacity ());
    b[n].length = &i.virtualKeyDefine_size;
    b[n].is_null = &i.virtualKeyDefine_null;
    n++;

    // switchKeyfCount
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.switchKeyfCount_value;
    b[n].is_null = &i.switchKeyfCount_null;
    n++;

    // security
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.security_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.security_value.capacity ());
    b[n].length = &i.security_size;
    b[n].is_null = &i.security_null;
    n++;

    // createDate
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.createDate_value;
    b[n].is_null = &i.createDate_null;
    n++;

    // createUser
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.createUser_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.createUser_value.capacity ());
    b[n].length = &i.createUser_size;
    b[n].is_null = &i.createUser_null;
    n++;

    // createVerification
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.createVerification_value;
    b[n].is_null = &i.createVerification_null;
    n++;

    // productionDate
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.productionDate_value;
    b[n].is_null = &i.productionDate_null;
    n++;

    // productionUser
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.productionUser_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.productionUser_value.capacity ());
    b[n].length = &i.productionUser_size;
    b[n].is_null = &i.productionUser_null;
    n++;

    // activationDate
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.activationDate_value;
    b[n].is_null = &i.activationDate_null;
    n++;

    // deviceFlag
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.deviceFlag_value;
    b[n].is_null = &i.deviceFlag_null;
    n++;
  }

  void access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // deviceID
    //
    {
      unsigned int const& v =
        o.deviceID;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_long >::set_image (
        i.deviceID_value, is_null, v);
      i.deviceID_null = is_null;
    }

    // idsecurity
    //
    {
      ::uint16_t const& v =
        o.idsecurity;

      bool is_null (true);
      mysql::value_traits<
          ::uint16_t,
          mysql::id_long >::set_image (
        i.idsecurity_value, is_null, v);
      i.idsecurity_null = is_null;
    }

    // deviceType
    //
    {
      ::uint16_t const& v =
        o.deviceType;

      bool is_null (false);
      mysql::value_traits<
          ::uint16_t,
          mysql::id_long >::set_image (
        i.deviceType_value, is_null, v);
      i.deviceType_null = is_null;
    }

    // virtualKeyCount
    //
    {
      ::uint16_t const& v =
        o.virtualKeyCount;

      bool is_null (true);
      mysql::value_traits<
          ::uint16_t,
          mysql::id_long >::set_image (
        i.virtualKeyCount_value, is_null, v);
      i.virtualKeyCount_null = is_null;
    }

    // virtualKeyDefine
    //
    {
      char const* v =
        o.virtualKeyDefine;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.virtualKeyDefine_value.capacity ());
      mysql::value_traits<
          char[16],
          mysql::id_string >::set_image (
        i.virtualKeyDefine_value,
        size,
        is_null,
        v);
      i.virtualKeyDefine_null = is_null;
      i.virtualKeyDefine_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.virtualKeyDefine_value.capacity ());
    }

    // switchKeyfCount
    //
    {
      ::uint16_t const& v =
        o.switchKeyfCount;

      bool is_null (true);
      mysql::value_traits<
          ::uint16_t,
          mysql::id_long >::set_image (
        i.switchKeyfCount_value, is_null, v);
      i.switchKeyfCount_null = is_null;
    }

    // security
    //
    {
      char const* v =
        o.security;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.security_value.capacity ());
      mysql::value_traits<
          char[32],
          mysql::id_string >::set_image (
        i.security_value,
        size,
        is_null,
        v);
      i.security_null = is_null;
      i.security_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.security_value.capacity ());
    }

    // createDate
    //
    {
      ::boost::posix_time::ptime const& v =
        o.createDate;

      bool is_null (false);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.createDate_value, is_null, v);
      i.createDate_null = is_null;
    }

    // createUser
    //
    {
      ::std::string const& v =
        o.createUser;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.createUser_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.createUser_value,
        size,
        is_null,
        v);
      i.createUser_null = is_null;
      i.createUser_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.createUser_value.capacity ());
    }

    // createVerification
    //
    {
      bool const& v =
        o.createVerification;

      bool is_null (true);
      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_image (
        i.createVerification_value, is_null, v);
      i.createVerification_null = is_null;
    }

    // productionDate
    //
    {
      ::boost::posix_time::ptime const& v =
        o.productionDate;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.productionDate_value, is_null, v);
      i.productionDate_null = is_null;
    }

    // productionUser
    //
    {
      ::std::string const& v =
        o.productionUser;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.productionUser_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.productionUser_value,
        size,
        is_null,
        v);
      i.productionUser_null = is_null;
      i.productionUser_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.productionUser_value.capacity ());
    }

    // activationDate
    //
    {
      ::boost::posix_time::ptime const& v =
        o.activationDate;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.activationDate_value, is_null, v);
      i.activationDate_null = is_null;
    }

    // deviceFlag
    //
    {
      int const& v =
        o.deviceFlag;

      bool is_null (true);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.deviceFlag_value, is_null, v);
      i.deviceFlag_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // deviceID
    //
    {
      unsigned int& v =
        o.deviceID;

      mysql::value_traits<
          unsigned int,
          mysql::id_long >::set_value (
        v,
        i.deviceID_value,
        i.deviceID_null);
    }

    // idsecurity
    //
    {
      ::uint16_t& v =
        o.idsecurity;

      mysql::value_traits<
          ::uint16_t,
          mysql::id_long >::set_value (
        v,
        i.idsecurity_value,
        i.idsecurity_null);
    }

    // deviceType
    //
    {
      ::uint16_t& v =
        o.deviceType;

      mysql::value_traits<
          ::uint16_t,
          mysql::id_long >::set_value (
        v,
        i.deviceType_value,
        i.deviceType_null);
    }

    // virtualKeyCount
    //
    {
      ::uint16_t& v =
        o.virtualKeyCount;

      mysql::value_traits<
          ::uint16_t,
          mysql::id_long >::set_value (
        v,
        i.virtualKeyCount_value,
        i.virtualKeyCount_null);
    }

    // virtualKeyDefine
    //
    {
      char* v =
        o.virtualKeyDefine;

      mysql::value_traits<
          char[16],
          mysql::id_string >::set_value (
        v,
        i.virtualKeyDefine_value,
        i.virtualKeyDefine_size,
        i.virtualKeyDefine_null);
    }

    // switchKeyfCount
    //
    {
      ::uint16_t& v =
        o.switchKeyfCount;

      mysql::value_traits<
          ::uint16_t,
          mysql::id_long >::set_value (
        v,
        i.switchKeyfCount_value,
        i.switchKeyfCount_null);
    }

    // security
    //
    {
      char* v =
        o.security;

      mysql::value_traits<
          char[32],
          mysql::id_string >::set_value (
        v,
        i.security_value,
        i.security_size,
        i.security_null);
    }

    // createDate
    //
    {
      ::boost::posix_time::ptime& v =
        o.createDate;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.createDate_value,
        i.createDate_null);
    }

    // createUser
    //
    {
      ::std::string& v =
        o.createUser;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.createUser_value,
        i.createUser_size,
        i.createUser_null);
    }

    // createVerification
    //
    {
      bool& v =
        o.createVerification;

      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_value (
        v,
        i.createVerification_value,
        i.createVerification_null);
    }

    // productionDate
    //
    {
      ::boost::posix_time::ptime& v =
        o.productionDate;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.productionDate_value,
        i.productionDate_null);
    }

    // productionUser
    //
    {
      ::std::string& v =
        o.productionUser;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.productionUser_value,
        i.productionUser_size,
        i.productionUser_null);
    }

    // activationDate
    //
    {
      ::boost::posix_time::ptime& v =
        o.activationDate;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.activationDate_value,
        i.activationDate_null);
    }

    // deviceFlag
    //
    {
      int& v =
        o.deviceFlag;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.deviceFlag_value,
        i.deviceFlag_null);
    }
  }

  void access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::MHJDeviceBase, id_mysql >::persist_statement[] =
  "INSERT INTO `MHJDeviceBase` "
  "(`id`, "
  "`deviceID`, "
  "`idsecurity`, "
  "`deviceType`, "
  "`virtualKeyCount`, "
  "`virtualKeyDefine`, "
  "`switchKeyfCount`, "
  "`security`, "
  "`createDate`, "
  "`createUser`, "
  "`createVerification`, "
  "`productionDate`, "
  "`productionUser`, "
  "`activationDate`, "
  "`deviceFlag`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::MHJDeviceBase, id_mysql >::find_statement[] =
  "SELECT "
  "`MHJDeviceBase`.`id`, "
  "`MHJDeviceBase`.`deviceID`, "
  "`MHJDeviceBase`.`idsecurity`, "
  "`MHJDeviceBase`.`deviceType`, "
  "`MHJDeviceBase`.`virtualKeyCount`, "
  "`MHJDeviceBase`.`virtualKeyDefine`, "
  "`MHJDeviceBase`.`switchKeyfCount`, "
  "`MHJDeviceBase`.`security`, "
  "`MHJDeviceBase`.`createDate`, "
  "`MHJDeviceBase`.`createUser`, "
  "`MHJDeviceBase`.`createVerification`, "
  "`MHJDeviceBase`.`productionDate`, "
  "`MHJDeviceBase`.`productionUser`, "
  "`MHJDeviceBase`.`activationDate`, "
  "`MHJDeviceBase`.`deviceFlag` "
  "FROM `MHJDeviceBase` "
  "WHERE `MHJDeviceBase`.`id`=?";

  const char access::object_traits_impl< ::MHJDeviceBase, id_mysql >::update_statement[] =
  "UPDATE `MHJDeviceBase` "
  "SET "
  "`deviceID`=?, "
  "`idsecurity`=?, "
  "`deviceType`=?, "
  "`virtualKeyCount`=?, "
  "`virtualKeyDefine`=?, "
  "`switchKeyfCount`=?, "
  "`security`=?, "
  "`createDate`=?, "
  "`createUser`=?, "
  "`createVerification`=?, "
  "`productionDate`=?, "
  "`productionUser`=?, "
  "`activationDate`=?, "
  "`deviceFlag`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceBase, id_mysql >::erase_statement[] =
  "DELETE FROM `MHJDeviceBase` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceBase, id_mysql >::query_statement[] =
  "SELECT "
  "`MHJDeviceBase`.`id`, "
  "`MHJDeviceBase`.`deviceID`, "
  "`MHJDeviceBase`.`idsecurity`, "
  "`MHJDeviceBase`.`deviceType`, "
  "`MHJDeviceBase`.`virtualKeyCount`, "
  "`MHJDeviceBase`.`virtualKeyDefine`, "
  "`MHJDeviceBase`.`switchKeyfCount`, "
  "`MHJDeviceBase`.`security`, "
  "`MHJDeviceBase`.`createDate`, "
  "`MHJDeviceBase`.`createUser`, "
  "`MHJDeviceBase`.`createVerification`, "
  "`MHJDeviceBase`.`productionDate`, "
  "`MHJDeviceBase`.`productionUser`, "
  "`MHJDeviceBase`.`activationDate`, "
  "`MHJDeviceBase`.`deviceFlag` "
  "FROM `MHJDeviceBase`";

  const char access::object_traits_impl< ::MHJDeviceBase, id_mysql >::erase_query_statement[] =
  "DELETE FROM `MHJDeviceBase`";

  const char access::object_traits_impl< ::MHJDeviceBase, id_mysql >::table_name[] =
  "`MHJDeviceBase`";

  void access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::MHJDeviceBase, id_mysql >::pointer_type
  access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::MHJDeviceBase, id_mysql >::object_type >
  access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::MHJDeviceBase, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // MHJDeviceChild
  //

  struct access::object_traits_impl< ::MHJDeviceChild, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::MHJDeviceChild, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::MHJDeviceChild, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // deviceID
    //
    t[1UL] = 0;

    // keyID
    //
    t[2UL] = 0;

    // Name
    //
    if (t[3UL])
    {
      i.Name_value.capacity (i.Name_size);
      grew = true;
    }

    // userID
    //
    t[4UL] = 0;

    // KeyDefine
    //
    t[5UL] = 0;

    // state
    //
    t[6UL] = 0;

    // defineChangeTime
    //
    t[7UL] = 0;

    // ImgIco
    //
    if (t[8UL])
    {
      i.ImgIco_value.capacity (i.ImgIco_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // deviceID
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.deviceID_value;
    b[n].is_null = &i.deviceID_null;
    n++;

    // keyID
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.keyID_value;
    b[n].is_null = &i.keyID_null;
    n++;

    // Name
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.Name_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.Name_value.capacity ());
    b[n].length = &i.Name_size;
    b[n].is_null = &i.Name_null;
    n++;

    // userID
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.userID_value;
    b[n].is_null = &i.userID_null;
    n++;

    // KeyDefine
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.KeyDefine_value;
    b[n].is_null = &i.KeyDefine_null;
    n++;

    // state
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.state_value;
    b[n].is_null = &i.state_null;
    n++;

    // defineChangeTime
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.defineChangeTime_value;
    b[n].is_null = &i.defineChangeTime_null;
    n++;

    // ImgIco
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.ImgIco_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.ImgIco_value.capacity ());
    b[n].length = &i.ImgIco_size;
    b[n].is_null = &i.ImgIco_null;
    n++;
  }

  void access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // deviceID
    //
    {
      long int const& v =
        o.deviceID;

      bool is_null (false);
      mysql::value_traits<
          long int,
          mysql::id_ulonglong >::set_image (
        i.deviceID_value, is_null, v);
      i.deviceID_null = is_null;
    }

    // keyID
    //
    {
      long unsigned int const& v =
        o.keyID;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.keyID_value, is_null, v);
      i.keyID_null = is_null;
    }

    // Name
    //
    {
      ::std::string const& v =
        o.Name;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.Name_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.Name_value,
        size,
        is_null,
        v);
      i.Name_null = is_null;
      i.Name_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.Name_value.capacity ());
    }

    // userID
    //
    {
      int const& v =
        o.userID;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.userID_value, is_null, v);
      i.userID_null = is_null;
    }

    // KeyDefine
    //
    {
      unsigned int const& v =
        o.KeyDefine;

      bool is_null (true);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.KeyDefine_value, is_null, v);
      i.KeyDefine_null = is_null;
    }

    // state
    //
    {
      unsigned int const& v =
        o.state;

      bool is_null (true);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.state_value, is_null, v);
      i.state_null = is_null;
    }

    // defineChangeTime
    //
    {
      ::boost::posix_time::ptime const& v =
        o.defineChangeTime;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.defineChangeTime_value, is_null, v);
      i.defineChangeTime_null = is_null;
    }

    // ImgIco
    //
    {
      ::std::string const& v =
        o.ImgIco;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.ImgIco_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.ImgIco_value,
        size,
        is_null,
        v);
      i.ImgIco_null = is_null;
      i.ImgIco_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.ImgIco_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // deviceID
    //
    {
      long int& v =
        o.deviceID;

      mysql::value_traits<
          long int,
          mysql::id_ulonglong >::set_value (
        v,
        i.deviceID_value,
        i.deviceID_null);
    }

    // keyID
    //
    {
      long unsigned int& v =
        o.keyID;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.keyID_value,
        i.keyID_null);
    }

    // Name
    //
    {
      ::std::string& v =
        o.Name;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Name_value,
        i.Name_size,
        i.Name_null);
    }

    // userID
    //
    {
      int& v =
        o.userID;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.userID_value,
        i.userID_null);
    }

    // KeyDefine
    //
    {
      unsigned int& v =
        o.KeyDefine;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.KeyDefine_value,
        i.KeyDefine_null);
    }

    // state
    //
    {
      unsigned int& v =
        o.state;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.state_value,
        i.state_null);
    }

    // defineChangeTime
    //
    {
      ::boost::posix_time::ptime& v =
        o.defineChangeTime;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.defineChangeTime_value,
        i.defineChangeTime_null);
    }

    // ImgIco
    //
    {
      ::std::string& v =
        o.ImgIco;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.ImgIco_value,
        i.ImgIco_size,
        i.ImgIco_null);
    }
  }

  void access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::MHJDeviceChild, id_mysql >::persist_statement[] =
  "INSERT INTO `MHJDeviceChild` "
  "(`id`, "
  "`device`, "
  "`keyID`, "
  "`Name`, "
  "`user`, "
  "`KeyDefine`, "
  "`state`, "
  "`defineChangeTime`, "
  "`ImgIco`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::MHJDeviceChild, id_mysql >::find_statement[] =
  "SELECT "
  "`MHJDeviceChild`.`id`, "
  "`MHJDeviceChild`.`device`, "
  "`MHJDeviceChild`.`keyID`, "
  "`MHJDeviceChild`.`Name`, "
  "`MHJDeviceChild`.`user`, "
  "`MHJDeviceChild`.`KeyDefine`, "
  "`MHJDeviceChild`.`state`, "
  "`MHJDeviceChild`.`defineChangeTime`, "
  "`MHJDeviceChild`.`ImgIco` "
  "FROM `MHJDeviceChild` "
  "WHERE `MHJDeviceChild`.`id`=?";

  const char access::object_traits_impl< ::MHJDeviceChild, id_mysql >::update_statement[] =
  "UPDATE `MHJDeviceChild` "
  "SET "
  "`device`=?, "
  "`keyID`=?, "
  "`Name`=?, "
  "`user`=?, "
  "`KeyDefine`=?, "
  "`state`=?, "
  "`defineChangeTime`=?, "
  "`ImgIco`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceChild, id_mysql >::erase_statement[] =
  "DELETE FROM `MHJDeviceChild` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceChild, id_mysql >::query_statement[] =
  "SELECT "
  "`MHJDeviceChild`.`id`, "
  "`MHJDeviceChild`.`device`, "
  "`MHJDeviceChild`.`keyID`, "
  "`MHJDeviceChild`.`Name`, "
  "`MHJDeviceChild`.`user`, "
  "`MHJDeviceChild`.`KeyDefine`, "
  "`MHJDeviceChild`.`state`, "
  "`MHJDeviceChild`.`defineChangeTime`, "
  "`MHJDeviceChild`.`ImgIco` "
  "FROM `MHJDeviceChild`";

  const char access::object_traits_impl< ::MHJDeviceChild, id_mysql >::erase_query_statement[] =
  "DELETE FROM `MHJDeviceChild`";

  const char access::object_traits_impl< ::MHJDeviceChild, id_mysql >::table_name[] =
  "`MHJDeviceChild`";

  void access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::MHJDeviceChild, id_mysql >::pointer_type
  access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::MHJDeviceChild, id_mysql >::object_type >
  access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::MHJDeviceChild, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // MHJDeviceVirtualDefine
  //

  struct access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // deviceKeyID
    //
    t[1UL] = 0;

    // targetKeyID
    //
    t[2UL] = 0;

    // targetNewState
    //
    t[3UL] = 0;

    // defineTime
    //
    t[4UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // deviceKeyID
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.deviceKeyID_value;
    b[n].is_null = &i.deviceKeyID_null;
    n++;

    // targetKeyID
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.targetKeyID_value;
    b[n].is_null = &i.targetKeyID_null;
    n++;

    // targetNewState
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.targetNewState_value;
    b[n].is_null = &i.targetNewState_null;
    n++;

    // defineTime
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.defineTime_value;
    b[n].is_null = &i.defineTime_null;
    n++;
  }

  void access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // deviceKeyID
    //
    {
      long unsigned int const& v =
        o.deviceKeyID;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.deviceKeyID_value, is_null, v);
      i.deviceKeyID_null = is_null;
    }

    // targetKeyID
    //
    {
      long unsigned int const& v =
        o.targetKeyID;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.targetKeyID_value, is_null, v);
      i.targetKeyID_null = is_null;
    }

    // targetNewState
    //
    {
      unsigned int const& v =
        o.targetNewState;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.targetNewState_value, is_null, v);
      i.targetNewState_null = is_null;
    }

    // defineTime
    //
    {
      ::boost::posix_time::ptime const& v =
        o.defineTime;

      bool is_null (false);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.defineTime_value, is_null, v);
      i.defineTime_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // deviceKeyID
    //
    {
      long unsigned int& v =
        o.deviceKeyID;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.deviceKeyID_value,
        i.deviceKeyID_null);
    }

    // targetKeyID
    //
    {
      long unsigned int& v =
        o.targetKeyID;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.targetKeyID_value,
        i.targetKeyID_null);
    }

    // targetNewState
    //
    {
      unsigned int& v =
        o.targetNewState;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.targetNewState_value,
        i.targetNewState_null);
    }

    // defineTime
    //
    {
      ::boost::posix_time::ptime& v =
        o.defineTime;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.defineTime_value,
        i.defineTime_null);
    }
  }

  void access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::persist_statement[] =
  "INSERT INTO `MHJDeviceVirtualDefine` "
  "(`id`, "
  "`deviceKey`, "
  "`targetKey`, "
  "`targetNewState`, "
  "`defineTime`) "
  "VALUES "
  "(?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::find_statement[] =
  "SELECT "
  "`MHJDeviceVirtualDefine`.`id`, "
  "`MHJDeviceVirtualDefine`.`deviceKey`, "
  "`MHJDeviceVirtualDefine`.`targetKey`, "
  "`MHJDeviceVirtualDefine`.`targetNewState`, "
  "`MHJDeviceVirtualDefine`.`defineTime` "
  "FROM `MHJDeviceVirtualDefine` "
  "WHERE `MHJDeviceVirtualDefine`.`id`=?";

  const char access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::update_statement[] =
  "UPDATE `MHJDeviceVirtualDefine` "
  "SET "
  "`deviceKey`=?, "
  "`targetKey`=?, "
  "`targetNewState`=?, "
  "`defineTime`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::erase_statement[] =
  "DELETE FROM `MHJDeviceVirtualDefine` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::query_statement[] =
  "SELECT "
  "`MHJDeviceVirtualDefine`.`id`, "
  "`MHJDeviceVirtualDefine`.`deviceKey`, "
  "`MHJDeviceVirtualDefine`.`targetKey`, "
  "`MHJDeviceVirtualDefine`.`targetNewState`, "
  "`MHJDeviceVirtualDefine`.`defineTime` "
  "FROM `MHJDeviceVirtualDefine`";

  const char access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::erase_query_statement[] =
  "DELETE FROM `MHJDeviceVirtualDefine`";

  const char access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::table_name[] =
  "`MHJDeviceVirtualDefine`";

  void access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::pointer_type
  access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::object_type >
  access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::MHJDeviceVirtualDefine, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // MHJDeviceActivation
  //

  struct access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // deviceID
    //
    t[1UL] = 0;

    // Date
    //
    t[2UL] = 0;

    // ip
    //
    if (t[3UL])
    {
      i.ip_value.capacity (i.ip_size);
      grew = true;
    }

    // mac
    //
    if (t[4UL])
    {
      i.mac_value.capacity (i.mac_size);
      grew = true;
    }

    // userID
    //
    t[5UL] = 0;

    // DeviceName
    //
    if (t[6UL])
    {
      i.DeviceName_value.capacity (i.DeviceName_size);
      grew = true;
    }

    // softVer
    //
    if (t[7UL])
    {
      i.softVer_value.capacity (i.softVer_size);
      grew = true;
    }

    // newSoftUrl
    //
    if (t[8UL])
    {
      i.newSoftUrl_value.capacity (i.newSoftUrl_size);
      grew = true;
    }

    // newSoftVer
    //
    if (t[9UL])
    {
      i.newSoftVer_value.capacity (i.newSoftVer_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // deviceID
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.deviceID_value;
    b[n].is_null = &i.deviceID_null;
    n++;

    // Date
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.Date_value;
    b[n].is_null = &i.Date_null;
    n++;

    // ip
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.ip_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.ip_value.capacity ());
    b[n].length = &i.ip_size;
    b[n].is_null = &i.ip_null;
    n++;

    // mac
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.mac_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.mac_value.capacity ());
    b[n].length = &i.mac_size;
    b[n].is_null = &i.mac_null;
    n++;

    // userID
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.userID_value;
    b[n].is_null = &i.userID_null;
    n++;

    // DeviceName
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.DeviceName_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.DeviceName_value.capacity ());
    b[n].length = &i.DeviceName_size;
    b[n].is_null = &i.DeviceName_null;
    n++;

    // softVer
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.softVer_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.softVer_value.capacity ());
    b[n].length = &i.softVer_size;
    b[n].is_null = &i.softVer_null;
    n++;

    // newSoftUrl
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.newSoftUrl_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.newSoftUrl_value.capacity ());
    b[n].length = &i.newSoftUrl_size;
    b[n].is_null = &i.newSoftUrl_null;
    n++;

    // newSoftVer
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.newSoftVer_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.newSoftVer_value.capacity ());
    b[n].length = &i.newSoftVer_size;
    b[n].is_null = &i.newSoftVer_null;
    n++;
  }

  void access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // deviceID
    //
    {
      long int const& v =
        o.deviceID;

      bool is_null (false);
      mysql::value_traits<
          long int,
          mysql::id_ulonglong >::set_image (
        i.deviceID_value, is_null, v);
      i.deviceID_null = is_null;
    }

    // Date
    //
    {
      ::boost::posix_time::ptime const& v =
        o.Date;

      bool is_null (false);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.Date_value, is_null, v);
      i.Date_null = is_null;
    }

    // ip
    //
    {
      ::std::string const& v =
        o.ip;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.ip_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.ip_value,
        size,
        is_null,
        v);
      i.ip_null = is_null;
      i.ip_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.ip_value.capacity ());
    }

    // mac
    //
    {
      ::std::string const& v =
        o.mac;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.mac_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.mac_value,
        size,
        is_null,
        v);
      i.mac_null = is_null;
      i.mac_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.mac_value.capacity ());
    }

    // userID
    //
    {
      int const& v =
        o.userID;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.userID_value, is_null, v);
      i.userID_null = is_null;
    }

    // DeviceName
    //
    {
      ::std::string const& v =
        o.DeviceName;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.DeviceName_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.DeviceName_value,
        size,
        is_null,
        v);
      i.DeviceName_null = is_null;
      i.DeviceName_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.DeviceName_value.capacity ());
    }

    // softVer
    //
    {
      ::std::string const& v =
        o.softVer;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.softVer_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.softVer_value,
        size,
        is_null,
        v);
      i.softVer_null = is_null;
      i.softVer_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.softVer_value.capacity ());
    }

    // newSoftUrl
    //
    {
      ::std::string const& v =
        o.newSoftUrl;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.newSoftUrl_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.newSoftUrl_value,
        size,
        is_null,
        v);
      i.newSoftUrl_null = is_null;
      i.newSoftUrl_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.newSoftUrl_value.capacity ());
    }

    // newSoftVer
    //
    {
      ::std::string const& v =
        o.newSoftVer;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.newSoftVer_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.newSoftVer_value,
        size,
        is_null,
        v);
      i.newSoftVer_null = is_null;
      i.newSoftVer_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.newSoftVer_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // deviceID
    //
    {
      long int& v =
        o.deviceID;

      mysql::value_traits<
          long int,
          mysql::id_ulonglong >::set_value (
        v,
        i.deviceID_value,
        i.deviceID_null);
    }

    // Date
    //
    {
      ::boost::posix_time::ptime& v =
        o.Date;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.Date_value,
        i.Date_null);
    }

    // ip
    //
    {
      ::std::string& v =
        o.ip;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.ip_value,
        i.ip_size,
        i.ip_null);
    }

    // mac
    //
    {
      ::std::string& v =
        o.mac;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.mac_value,
        i.mac_size,
        i.mac_null);
    }

    // userID
    //
    {
      int& v =
        o.userID;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.userID_value,
        i.userID_null);
    }

    // DeviceName
    //
    {
      ::std::string& v =
        o.DeviceName;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.DeviceName_value,
        i.DeviceName_size,
        i.DeviceName_null);
    }

    // softVer
    //
    {
      ::std::string& v =
        o.softVer;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.softVer_value,
        i.softVer_size,
        i.softVer_null);
    }

    // newSoftUrl
    //
    {
      ::std::string& v =
        o.newSoftUrl;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.newSoftUrl_value,
        i.newSoftUrl_size,
        i.newSoftUrl_null);
    }

    // newSoftVer
    //
    {
      ::std::string& v =
        o.newSoftVer;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.newSoftVer_value,
        i.newSoftVer_size,
        i.newSoftVer_null);
    }
  }

  void access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::persist_statement[] =
  "INSERT INTO `MHJDeviceActivation` "
  "(`id`, "
  "`device`, "
  "`Date`, "
  "`ip`, "
  "`mac`, "
  "`user`, "
  "`DeviceName`, "
  "`softVer`, "
  "`newSoftUrl`, "
  "`newSoftVer`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::find_statement[] =
  "SELECT "
  "`MHJDeviceActivation`.`id`, "
  "`MHJDeviceActivation`.`device`, "
  "`MHJDeviceActivation`.`Date`, "
  "`MHJDeviceActivation`.`ip`, "
  "`MHJDeviceActivation`.`mac`, "
  "`MHJDeviceActivation`.`user`, "
  "`MHJDeviceActivation`.`DeviceName`, "
  "`MHJDeviceActivation`.`softVer`, "
  "`MHJDeviceActivation`.`newSoftUrl`, "
  "`MHJDeviceActivation`.`newSoftVer` "
  "FROM `MHJDeviceActivation` "
  "WHERE `MHJDeviceActivation`.`id`=?";

  const char access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::update_statement[] =
  "UPDATE `MHJDeviceActivation` "
  "SET "
  "`device`=?, "
  "`Date`=?, "
  "`ip`=?, "
  "`mac`=?, "
  "`user`=?, "
  "`DeviceName`=?, "
  "`softVer`=?, "
  "`newSoftUrl`=?, "
  "`newSoftVer`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::erase_statement[] =
  "DELETE FROM `MHJDeviceActivation` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::query_statement[] =
  "SELECT "
  "`MHJDeviceActivation`.`id`, "
  "`MHJDeviceActivation`.`device`, "
  "`MHJDeviceActivation`.`Date`, "
  "`MHJDeviceActivation`.`ip`, "
  "`MHJDeviceActivation`.`mac`, "
  "`MHJDeviceActivation`.`user`, "
  "`MHJDeviceActivation`.`DeviceName`, "
  "`MHJDeviceActivation`.`softVer`, "
  "`MHJDeviceActivation`.`newSoftUrl`, "
  "`MHJDeviceActivation`.`newSoftVer` "
  "FROM `MHJDeviceActivation`";

  const char access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::erase_query_statement[] =
  "DELETE FROM `MHJDeviceActivation`";

  const char access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::table_name[] =
  "`MHJDeviceActivation`";

  void access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::pointer_type
  access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::object_type >
  access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::MHJDeviceActivation, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // MHJDeviceAuthorize
  //

  struct access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  id (const id_image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::id_type
  access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // deviceID
    //
    t[1UL] = 0;

    // childID
    //
    t[2UL] = 0;

    // startDate
    //
    t[3UL] = 0;

    // endDate
    //
    t[4UL] = 0;

    // userID
    //
    t[5UL] = 0;

    // giveUserID
    //
    t[6UL] = 0;

    // giveType
    //
    t[7UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // deviceID
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.deviceID_value;
    b[n].is_null = &i.deviceID_null;
    n++;

    // childID
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.childID_value;
    b[n].is_null = &i.childID_null;
    n++;

    // startDate
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.startDate_value;
    b[n].is_null = &i.startDate_null;
    n++;

    // endDate
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.endDate_value;
    b[n].is_null = &i.endDate_null;
    n++;

    // userID
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.userID_value;
    b[n].is_null = &i.userID_null;
    n++;

    // giveUserID
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.giveUserID_value;
    b[n].is_null = &i.giveUserID_null;
    n++;

    // giveType
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.giveType_value;
    b[n].is_null = &i.giveType_null;
    n++;
  }

  void access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // deviceID
    //
    {
      long int const& v =
        o.deviceID;

      bool is_null (false);
      mysql::value_traits<
          long int,
          mysql::id_ulonglong >::set_image (
        i.deviceID_value, is_null, v);
      i.deviceID_null = is_null;
    }

    // childID
    //
    {
      long int const& v =
        o.childID;

      bool is_null (false);
      mysql::value_traits<
          long int,
          mysql::id_ulonglong >::set_image (
        i.childID_value, is_null, v);
      i.childID_null = is_null;
    }

    // startDate
    //
    {
      ::boost::posix_time::ptime const& v =
        o.startDate;

      bool is_null (false);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.startDate_value, is_null, v);
      i.startDate_null = is_null;
    }

    // endDate
    //
    {
      ::boost::posix_time::ptime const& v =
        o.endDate;

      bool is_null (false);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.endDate_value, is_null, v);
      i.endDate_null = is_null;
    }

    // userID
    //
    {
      int const& v =
        o.userID;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.userID_value, is_null, v);
      i.userID_null = is_null;
    }

    // giveUserID
    //
    {
      int const& v =
        o.giveUserID;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.giveUserID_value, is_null, v);
      i.giveUserID_null = is_null;
    }

    // giveType
    //
    {
      int const& v =
        o.giveType;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.giveType_value, is_null, v);
      i.giveType_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // deviceID
    //
    {
      long int& v =
        o.deviceID;

      mysql::value_traits<
          long int,
          mysql::id_ulonglong >::set_value (
        v,
        i.deviceID_value,
        i.deviceID_null);
    }

    // childID
    //
    {
      long int& v =
        o.childID;

      mysql::value_traits<
          long int,
          mysql::id_ulonglong >::set_value (
        v,
        i.childID_value,
        i.childID_null);
    }

    // startDate
    //
    {
      ::boost::posix_time::ptime& v =
        o.startDate;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.startDate_value,
        i.startDate_null);
    }

    // endDate
    //
    {
      ::boost::posix_time::ptime& v =
        o.endDate;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.endDate_value,
        i.endDate_null);
    }

    // userID
    //
    {
      int& v =
        o.userID;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.userID_value,
        i.userID_null);
    }

    // giveUserID
    //
    {
      int& v =
        o.giveUserID;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.giveUserID_value,
        i.giveUserID_null);
    }

    // giveType
    //
    {
      int& v =
        o.giveType;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.giveType_value,
        i.giveType_null);
    }
  }

  void access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long unsigned int,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::persist_statement[] =
  "INSERT INTO `MHJDeviceAuthorize` "
  "(`id`, "
  "`device`, "
  "`child`, "
  "`startDate`, "
  "`endDate`, "
  "`user`, "
  "`giveUser`, "
  "`giveType`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::find_statement[] =
  "SELECT "
  "`MHJDeviceAuthorize`.`id`, "
  "`MHJDeviceAuthorize`.`device`, "
  "`MHJDeviceAuthorize`.`child`, "
  "`MHJDeviceAuthorize`.`startDate`, "
  "`MHJDeviceAuthorize`.`endDate`, "
  "`MHJDeviceAuthorize`.`user`, "
  "`MHJDeviceAuthorize`.`giveUser`, "
  "`MHJDeviceAuthorize`.`giveType` "
  "FROM `MHJDeviceAuthorize` "
  "WHERE `MHJDeviceAuthorize`.`id`=?";

  const char access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::update_statement[] =
  "UPDATE `MHJDeviceAuthorize` "
  "SET "
  "`device`=?, "
  "`child`=?, "
  "`startDate`=?, "
  "`endDate`=?, "
  "`user`=?, "
  "`giveUser`=?, "
  "`giveType`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::erase_statement[] =
  "DELETE FROM `MHJDeviceAuthorize` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::query_statement[] =
  "SELECT "
  "`MHJDeviceAuthorize`.`id`, "
  "`MHJDeviceAuthorize`.`device`, "
  "`MHJDeviceAuthorize`.`child`, "
  "`MHJDeviceAuthorize`.`startDate`, "
  "`MHJDeviceAuthorize`.`endDate`, "
  "`MHJDeviceAuthorize`.`user`, "
  "`MHJDeviceAuthorize`.`giveUser`, "
  "`MHJDeviceAuthorize`.`giveType` "
  "FROM `MHJDeviceAuthorize`";

  const char access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::erase_query_statement[] =
  "DELETE FROM `MHJDeviceAuthorize`";

  const char access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::table_name[] =
  "`MHJDeviceAuthorize`";

  void access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::pointer_type
  access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::object_type >
  access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::MHJDeviceAuthorize, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // MHJUserEntity
  //

  bool access::view_traits_impl< ::MHJUserEntity, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // UserName
    //
    if (t[1UL])
    {
      i.UserName_value.capacity (i.UserName_size);
      grew = true;
    }

    // UserTitle
    //
    if (t[2UL])
    {
      i.UserTitle_value.capacity (i.UserTitle_size);
      grew = true;
    }

    // Password
    //
    if (t[3UL])
    {
      i.Password_value.capacity (i.Password_size);
      grew = true;
    }

    // userToken
    //
    if (t[4UL])
    {
      i.userToken_value.capacity (i.userToken_size);
      grew = true;
    }

    // tokenReplaceTime
    //
    t[5UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::MHJUserEntity, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i)
  {
    using namespace mysql;

    mysql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
    n++;

    // UserName
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.UserName_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.UserName_value.capacity ());
    b[n].length = &i.UserName_size;
    b[n].is_null = &i.UserName_null;
    n++;

    // UserTitle
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.UserTitle_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.UserTitle_value.capacity ());
    b[n].length = &i.UserTitle_size;
    b[n].is_null = &i.UserTitle_null;
    n++;

    // Password
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.Password_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.Password_value.capacity ());
    b[n].length = &i.Password_size;
    b[n].is_null = &i.Password_null;
    n++;

    // userToken
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.userToken_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.userToken_value.capacity ());
    b[n].length = &i.userToken_size;
    b[n].is_null = &i.userToken_null;
    n++;

    // tokenReplaceTime
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.tokenReplaceTime_value;
    b[n].is_null = &i.tokenReplaceTime_null;
    n++;
  }

  void access::view_traits_impl< ::MHJUserEntity, id_mysql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      mysql::value_traits<
          long unsigned int,
          mysql::id_long >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // UserName
    //
    {
      ::std::string& v =
        o.UserName;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.UserName_value,
        i.UserName_size,
        i.UserName_null);
    }

    // UserTitle
    //
    {
      ::std::string& v =
        o.UserTitle;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.UserTitle_value,
        i.UserTitle_size,
        i.UserTitle_null);
    }

    // Password
    //
    {
      ::std::string& v =
        o.Password;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Password_value,
        i.Password_size,
        i.Password_null);
    }

    // userToken
    //
    {
      char* v =
        o.userToken;

      mysql::value_traits<
          char[32],
          mysql::id_string >::set_value (
        v,
        i.userToken_value,
        i.userToken_size,
        i.userToken_null);
    }

    // tokenReplaceTime
    //
    {
      long int& v =
        o.tokenReplaceTime;

      mysql::value_traits<
          long int,
          mysql::id_longlong >::set_value (
        v,
        i.tokenReplaceTime_value,
        i.tokenReplaceTime_null);
    }
  }

  access::view_traits_impl< ::MHJUserEntity, id_mysql >::query_base_type
  access::view_traits_impl< ::MHJUserEntity, id_mysql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "`id`, "
      "`UserName`, "
      "`usertitle`, "
      "`password`, "
      "`userToken`, "
      "`tokenReplaceTime` ");

    r += "FROM `user_entity`";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::MHJUserEntity, id_mysql >::view_type >
  access::view_traits_impl< ::MHJUserEntity, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mysql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // MHJAdminEntity
  //

  bool access::view_traits_impl< ::MHJAdminEntity, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = 0;

    // UserName
    //
    if (t[1UL])
    {
      i.UserName_value.capacity (i.UserName_size);
      grew = true;
    }

    // Password
    //
    if (t[2UL])
    {
      i.Password_value.capacity (i.Password_size);
      grew = true;
    }

    // adminToken
    //
    if (t[3UL])
    {
      i.adminToken_value.capacity (i.adminToken_size);
      grew = true;
    }

    // tokenReplaceTime
    //
    t[4UL] = 0;

    return grew;
  }

  void access::view_traits_impl< ::MHJAdminEntity, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i)
  {
    using namespace mysql;

    mysql::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // id
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
    n++;

    // UserName
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.UserName_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.UserName_value.capacity ());
    b[n].length = &i.UserName_size;
    b[n].is_null = &i.UserName_null;
    n++;

    // Password
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.Password_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.Password_value.capacity ());
    b[n].length = &i.Password_size;
    b[n].is_null = &i.Password_null;
    n++;

    // adminToken
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.adminToken_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.adminToken_value.capacity ());
    b[n].length = &i.adminToken_size;
    b[n].is_null = &i.adminToken_null;
    n++;

    // tokenReplaceTime
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.tokenReplaceTime_value;
    b[n].is_null = &i.tokenReplaceTime_null;
    n++;
  }

  void access::view_traits_impl< ::MHJAdminEntity, id_mysql >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      long unsigned int& v =
        o.id;

      mysql::value_traits<
          long unsigned int,
          mysql::id_long >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // UserName
    //
    {
      ::std::string& v =
        o.UserName;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.UserName_value,
        i.UserName_size,
        i.UserName_null);
    }

    // Password
    //
    {
      ::std::string& v =
        o.Password;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.Password_value,
        i.Password_size,
        i.Password_null);
    }

    // adminToken
    //
    {
      char* v =
        o.adminToken;

      mysql::value_traits<
          char[32],
          mysql::id_string >::set_value (
        v,
        i.adminToken_value,
        i.adminToken_size,
        i.adminToken_null);
    }

    // tokenReplaceTime
    //
    {
      ::boost::posix_time::ptime& v =
        o.tokenReplaceTime;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.tokenReplaceTime_value,
        i.tokenReplaceTime_null);
    }
  }

  access::view_traits_impl< ::MHJAdminEntity, id_mysql >::query_base_type
  access::view_traits_impl< ::MHJAdminEntity, id_mysql >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "`id`, "
      "`UserName`, "
      "`Password`, "
      "`adminToken`, "
      "`tokenReplaceTime` ");

    r += "FROM `admin_entity`";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::MHJAdminEntity, id_mysql >::view_type >
  access::view_traits_impl< ::MHJAdminEntity, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) mysql::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }
}

#include <odb/post.hxx>
#endif
